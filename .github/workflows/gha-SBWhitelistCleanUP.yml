name: Nightly SB Whitelist Cleanup

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

permissions:
  actions: read
  checks: write
  contents: read
  id-token: write
  pull-requests: read
  statuses: read

jobs:
  clean-up:
    runs-on: ubuntu-latest
    env:
      AZURE_STORAGE_ACCOUNT: poc2sbwhitelist2 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id:     ${{ secrets.CLIENTID }}
          tenant-id:     ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.subscriptionId }}

      - name: Process all queued IPs (final fix)
        run: |
          echo "üîç Checking queue status..."
          QUEUE_COUNT=$(az storage message peek \
            --account-name $AZURE_STORAGE_ACCOUNT \
            --queue-name sb-whitelist \
            --num-messages 32 \
            --auth-mode login \
            --query 'length(@)' -o tsv)
          
          echo "üìä Found $QUEUE_COUNT messages in queue"
          
          if [ "$QUEUE_COUNT" -eq 0 ]; then
            echo "‚úÖ Queue is empty, nothing to process"
            exit 0
          fi

          PROCESSED_COUNT=0
          ERROR_COUNT=0
          MAX_ITERATIONS=50  # Prevenir loop infinito

          for i in $(seq 1 $MAX_ITERATIONS); do
            echo "üîÑ Iteration $i/$MAX_ITERATIONS"
            
            # Tentar pegar mensagens m√∫ltiplas para processar em batch
            MESSAGES=$(az storage message get \
              --account-name $AZURE_STORAGE_ACCOUNT \
              --queue-name sb-whitelist \
              --num-messages 5 \
              --visibility-timeout 60 \
              --auth-mode login \
              -o json)

            # Se n√£o tem mensagens, sair do loop
            if [ "$MESSAGES" = "[]" ] || [ "$MESSAGES" = "null" ] || [ -z "$MESSAGES" ]; then
              echo "‚úÖ No more messages in queue"
              break
            fi

            # Processar cada mensagem do batch
            echo "$MESSAGES" | jq -c '.[]?' | while read -r msg; do
              if [ -z "$msg" ] || [ "$msg" = "null" ]; then
                continue
              fi

              # Debug: mostrar a estrutura da mensagem
              echo "üîç Debug message structure:"
              echo "$msg" | jq '.'

              MSG_ID=$(echo "$msg" | jq -r '.messageId // .id // empty')
              POP_RECEIPT=$(echo "$msg" | jq -r '.popReceipt // empty')
              PAYLOAD=$(echo "$msg" | jq -r '.messageText // .content // empty')
              
              echo "üì® Processing message: $MSG_ID"
              echo "üîë Pop receipt: ${POP_RECEIPT:0:20}..."
              
              # Se qualquer campo cr√≠tico estiver vazio/null, tentar limpar a mensagem √≥rf√£
              if [ -z "$MSG_ID" ] || [ -z "$POP_RECEIPT" ]; then
                echo "‚ö†Ô∏è  Message ID or Pop Receipt missing, this might be a corrupted message"
                echo "   MSG_ID: '$MSG_ID'"
                echo "   POP_RECEIPT: '${POP_RECEIPT:0:50}...'"
                continue
              fi
              
              if [ -z "$PAYLOAD" ]; then
                echo "‚ö†Ô∏è  Empty payload, deleting message"
                az storage message delete \
                  --account-name $AZURE_STORAGE_ACCOUNT \
                  --queue-name sb-whitelist \
                  --id "$MSG_ID" \
                  --pop-receipt "$POP_RECEIPT" \
                  --auth-mode login 2>/dev/null || echo "Failed to delete empty message"
                ((ERROR_COUNT++))
                continue
              fi

              echo "üìã Raw payload: $PAYLOAD"
              
              # Verificar se payload est√° mascarado
              if [[ "$PAYLOAD" == *"***"* ]]; then
                echo "‚ö†Ô∏è  Payload mascarado detectado. Tentando remover mensagem..."
                
                az storage message delete \
                  --account-name $AZURE_STORAGE_ACCOUNT \
                  --queue-name sb-whitelist \
                  --id "$MSG_ID" \
                  --pop-receipt "$POP_RECEIPT" \
                  --auth-mode login 2>/dev/null || echo "Failed to delete masked message"
                
                ((ERROR_COUNT++))
                continue
              fi

              # Parse do payload no formato: subscriptionId|rg|namespace|ip
              IFS='|' read -r SUB_ID RG NS IP <<< "$PAYLOAD"
              
              # Validar se todos os campos est√£o presentes
              if [ -z "$SUB_ID" ] || [ -z "$RG" ] || [ -z "$NS" ] || [ -z "$IP" ]; then
                echo "‚ùå Campos obrigat√≥rios faltando:"
                echo "   SUB_ID: '$SUB_ID'"
                echo "   RG: '$RG'"
                echo "   NS: '$NS'"
                echo "   IP: '$IP'"
                
                # Remover mensagem inv√°lida
                az storage message delete \
                  --account-name $AZURE_STORAGE_ACCOUNT \
                  --queue-name sb-whitelist \
                  --id "$MSG_ID" \
                  --pop-receipt "$POP_RECEIPT" \
                  --auth-mode login 2>/dev/null || echo "Failed to delete invalid message"
                
                ((ERROR_COUNT++))
                continue
              fi

              echo "üéØ Removing $IP from Service Bus '$NS' (RG=$RG / Sub=$SUB_ID)..."
              
              # Processar remo√ß√£o do IP
              SUCCESS=false
              if az account set -s "$SUB_ID" 2>/dev/null; then
                if az servicebus namespace network-rule-set ip-rule remove \
                  --resource-group "$RG" \
                  --namespace-name "$NS" \
                  --ip-rule ip-address="$IP" 2>/dev/null; then
                  echo "‚úÖ IP $IP removido com sucesso"
                  SUCCESS=true
                  ((PROCESSED_COUNT++))
                else
                  echo "‚ö†Ô∏è  IP $IP n√£o encontrado ou j√° removido"
                  SUCCESS=true  # Considerar sucesso se IP j√° n√£o existe
                  ((PROCESSED_COUNT++))
                fi
              else
                echo "‚ùå Falha ao acessar subscription $SUB_ID"
                ((ERROR_COUNT++))
              fi

              # Sempre tentar remover a mensagem da fila
              echo "üóëÔ∏è  Deleting message $MSG_ID..."
              if az storage message delete \
                --account-name $AZURE_STORAGE_ACCOUNT \
                --queue-name sb-whitelist \
                --id "$MSG_ID" \
                --pop-receipt "$POP_RECEIPT" \
                --auth-mode login 2>/dev/null; then
                echo "‚úÖ Message deleted successfully"
              else
                echo "‚ö†Ô∏è  Failed to delete message (may have been processed by another instance)"
              fi

            done
            
            # Pequena pausa entre itera√ß√µes
            sleep 2
          done

          echo ""
          echo "üìä Final Summary:"
          echo "   ‚úÖ Successfully processed: $PROCESSED_COUNT"
          echo "   ‚ùå Errors/Invalid messages: $ERROR_COUNT"
          
          # Verificar se ainda h√° mensagens na fila
          REMAINING=$(az storage message peek \
            --account-name $AZURE_STORAGE_ACCOUNT \
            --queue-name sb-whitelist \
            --num-messages 1 \
            --auth-mode login \
            --query 'length(@)' -o tsv 2>/dev/null || echo "0")
          
          echo "   üìã Messages remaining in queue: $REMAINING"
          
          if [ "$REMAINING" -gt 0 ]; then
            echo "‚ö†Ô∏è  Some messages may still be in queue. Check for processing conflicts or invalid messages."
          fi