name: Nightly SB Whitelist Cleanup

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

permissions:
  actions: read
  checks: write
  contents: read
  id-token: write
  pull-requests: read
  statuses: read

jobs:
  clean-up:
    runs-on: ubuntu-latest
    env:
      AZURE_STORAGE_ACCOUNT: poc2sbwhitelist2 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id:     ${{ secrets.CLIENTID }}
          tenant-id:     ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.subscriptionId }}

      - name: Process all queued IPs (final fix)
        run: |
          # Optional peek to inspect messages
          echo "üîç Checking queue status..."
          az storage message peek \
            --account-name $AZURE_STORAGE_ACCOUNT \
            --queue-name sb-whitelist \
            --num-messages 5 \
            --auth-mode login \
            -o table

          PROCESSED_COUNT=0
          ERROR_COUNT=0

          while true; do
            MSG_JSON=$(az storage message get \
              --account-name $AZURE_STORAGE_ACCOUNT \
              --queue-name sb-whitelist \
              --num-messages 1 \
              --visibility-timeout 30 \
              --auth-mode login \
              -o json --query '[0]')

            [ "$MSG_JSON" = "null" ] && { 
              echo "‚úÖ Queue empty, exiting. Processed: $PROCESSED_COUNT messages, Errors: $ERROR_COUNT"; 
              break; 
            }

            MSG_ID=$(echo "$MSG_JSON" | jq -r .messageId)
            POP=$(echo "$MSG_JSON" | jq -r .popReceipt)
            PAYLOAD=$(echo "$MSG_JSON" | jq -r .messageText)
            
            echo "üì® Processing message: $MSG_ID"
            echo "üìã Raw payload: $PAYLOAD"
            
            # Validar se o payload n√£o est√° mascarado ou corrompido
            if [[ "$PAYLOAD" == *"***"* ]] || [[ -z "$PAYLOAD" ]] || [[ "$PAYLOAD" == "null" ]]; then
              echo "‚ö†Ô∏è  Payload mascarado ou inv√°lido detectado. Removendo mensagem da fila."
              az storage message delete \
                --account-name $AZURE_STORAGE_ACCOUNT \
                --queue-name sb-whitelist \
                --id "$MSG_ID" \
                --pop-receipt "$POP" \
                --auth-mode login
              ((ERROR_COUNT++))
              continue
            fi

            # Parse do payload
            IFS='|' read -r SUB_ID RG NS IP <<< "$PAYLOAD"
            
            # Validar campos obrigat√≥rios
            if [[ -z "$SUB_ID" ]] || [[ -z "$RG" ]] || [[ -z "$NS" ]] || [[ -z "$IP" ]] || \
               [[ "$SUB_ID" == "null" ]] || [[ "$RG" == "null" ]] || [[ "$NS" == "null" ]] || [[ "$IP" == "null" ]]; then
              echo "‚ùå Campos obrigat√≥rios faltando ou inv√°lidos:"
              echo "   SUB_ID: '$SUB_ID'"
              echo "   RG: '$RG'"
              echo "   NS: '$NS'"
              echo "   IP: '$IP'"
              echo "   Removendo mensagem inv√°lida da fila."
              
              az storage message delete \
                --account-name $AZURE_STORAGE_ACCOUNT \
                --queue-name sb-whitelist \
                --id "$MSG_ID" \
                --pop-receipt "$POP" \
                --auth-mode login
              ((ERROR_COUNT++))
              continue
            fi

            echo "üéØ Removing $IP from Service Bus '$NS' (RG=$RG / Sub=$SUB_ID)..."
            
            # Tentar processar a remo√ß√£o
            if az account set -s "$SUB_ID" 2>/dev/null; then
              if az servicebus namespace network-rule-set ip-rule remove \
                --resource-group "$RG" \
                --namespace-name "$NS" \
                --ip-rule ip-address="$IP" 2>/dev/null; then
                echo "‚úÖ IP $IP removido com sucesso"
                ((PROCESSED_COUNT++))
              else
                echo "‚ö†Ô∏è  Falha ao remover IP (pode j√° ter sido removido ou n√£o existir)"
                ((PROCESSED_COUNT++))
              fi
            else
              echo "‚ùå Falha ao acessar subscription $SUB_ID"
              ((ERROR_COUNT++))
            fi

            # Sempre remover a mensagem da fila ap√≥s tentar processar
            echo "üóëÔ∏è  Deleting message $MSG_ID..."
            az storage message delete \
              --account-name $AZURE_STORAGE_ACCOUNT \
              --queue-name sb-whitelist \
              --id "$MSG_ID" \
              --pop-receipt "$POP" \
              --auth-mode login
          done

          echo "üìä Summary:"
          echo "   ‚úÖ Successfully processed: $PROCESSED_COUNT"
          echo "   ‚ùå Errors/Invalid messages: $ERROR_COUNT"
          
          # Se houver muitos erros, pode indicar um problema maior
          if [ $ERROR_COUNT -gt 10 ]; then
            echo "‚ö†Ô∏è  High error count detected. Please check message format and queue health."
            exit 1
          fi